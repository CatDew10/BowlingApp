{
	"info": {
		"_postman_id": "5b10e87c-6519-434f-a99b-ffd89bf3f23e",
		"name": "06-23_Petstore-Orders-CSV-Data",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6709962"
	},
	"item": [
		{
			"name": "Place an order for a pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Run only with csv file/Petstore.csv",
							"",
							"",
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"401: Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"403: Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"404: Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"422: he instance is not valid\"] = false;",
							"} else if (responseCode.code === 500) {",
							"    tests[\"500: Server Error \"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"pm.test(\"Current ID is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.iterationData.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"Current PetID is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.petId).to.eql(pm.iterationData.get(\"PETID\"));",
							"});",
							"",
							"pm.test(\"Current Quantity is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.quantity).to.eql(pm.iterationData.get(\"QT\"));",
							"});",
							"",
							"pm.test(\"Current STATUS is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(pm.iterationData.get(\"STS\"));",
							"});",
							"",
							"pm.test(\"Current Complete Key is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.complete).to.eql(Boolean(pm.iterationData.get(\"COM\")));",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": {{ID}},\n    \"petId\": {{PETID}},\n    \"quantity\": {{QT}},\n    \"shipDate\": \"2023-09-22T03:41:53.593Z\",\n    \"status\": \"{{STS}}\",\n    \"complete\": {{COM}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{ID}}"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Find purchase order by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"401: Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"403: Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"404: Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"422: he instance is not valid\"] = false;",
							"} else if (responseCode.code === 500) {",
							"    tests[\"500 Server Error \"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"pm.test(\"Current ID is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.iterationData.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"Current PetID is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.petId).to.eql(pm.iterationData.get(\"PETID\"));",
							"});",
							"",
							"pm.test(\"Current Quantity is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.quantity).to.eql(pm.iterationData.get(\"QT\"));",
							"});",
							"",
							"pm.test(\"Current STATUS is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(pm.iterationData.get(\"STS\"));",
							"});",
							"",
							"pm.test(\"Current Complete Key is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.complete).to.eql(Boolean(pm.iterationData.get(\"COM\")));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{ID}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Delete purchase order by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"401: Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"403: Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"404: Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"422: he instance is not valid\"] = false;",
							"} else if (responseCode.code === 500) {",
							"    tests[\"500 Server Error \"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"//Turn to String ID data \"\" +",
							"//Turn to Number ID string data  (1 * pm.iterationData.get(\"ID\"))",
							"pm.test(\"Current ID is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(\"\" + pm.iterationData.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"Current PetID is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.petId).to.eql(pm.iterationData.get(\"PETID\"));",
							"});",
							"",
							"pm.test(\"Current Quantity is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.quantity).to.eql(pm.iterationData.get(\"QT\"));",
							"});",
							"",
							"pm.test(\"Current STATUS is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(pm.iterationData.get(\"STS\"));",
							"});",
							"",
							"pm.test(\"Current Complete Key is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.complete).to.eql(Boolean(pm.iterationData.get(\"COM\")));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{ID}}"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}